const personModel = require("../models/personModel");

// Vaqtni tekshirish funktsiyasi
function isValidTimeFormat(time) {
  // Regex orqali vaqt formatini tekshiramiz (24 soatlik format)
  const timeRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
  return timeRegex.test(time);
}

const getInfo = async (existingUser, ctx) => {
  if (!existingUser) {
    existingUser = new personModel({ id: ctx.from.id });
    await existingUser.save();
  }

  let text = ctx.message?.text;

  switch (existingUser.step) {
    case 0:
      existingUser.step = 1;
      await existingUser.save();
      const ism = await ctx.replyWithHTML(
        "<strong>1. Marhumning ismini kiriting</strong>"
      );
      console.log(ism);
      return ism;

    case 1:
      existingUser.step = 2;
      existingUser.firstname = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        "<strong>2. Marhumning familiyasini kiriting</strong>"
      );

    case 2:
      existingUser.step = 3;
      existingUser.lastname = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        `<strong>3. Marhumning tug'ilgan sanasi kiriting</strong>`
      );

    case 3:
      if (isNaN(text))
        return ctx.replyWithHTML(
          "‚ö†Ô∏è <strong>Noto'g'ri format.</strong> \n\nIltimos yoshingizni son bilan kiriting!"
        );
      existingUser.step = 4;
      existingUser.birth = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        `<strong>4. Marhumning manzilini kiriting</strong>`
      );

    case 4:
      existingUser.step = 5;
      existingUser.address = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        `<strong>5. Marhumning janazasi o'qiladigan manzilni kiriting</strong>`
      );

    case 5:
      existingUser.step = 6;
      existingUser.fixedAddress = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        `<strong>6. Marhumning janazasi o'qiladigan manzil uchun '–æ—Ä–∏–µ–Ω—Ç–∏—Ä' kiriting</strong>`
      );

    case 6:
      existingUser.step = 7;
      existingUser.approximateDestination = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        `<strong>7. Marhumning janazasi o'qiladigan vaqtni kiriting</strong>`
      );

    case 7:
      if (!isValidTimeFormat(text)) {
        return ctx.replyWithHTML(
          "‚ö†Ô∏è <strong>Noto'g'ri vaqt formati.</strong> \n\nIltimos to'g'ri vaqt formatini kiriting! (Masalan: 18:30)"
        );
      }
      existingUser.step = 8;
      existingUser.funeralTime = text;
      await existingUser.save();
      return ctx.replyWithHTML(
        `<strong>8. Marhumning rasmini kiriting</strong>`
      );

    // case 8:
    //   existingUser.step = 7;
    //   existingUser.picture = text;
    //   console.log(text);
    //   await existingUser.save();
    //   const photoId = ctx.message.photo;
    //   console.log(photoId);

    default:
      return ctx.reply("‚ùóÔ∏è Xatolik default");
  }
};

module.exports = { getInfo };


=-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=


function isValidTimeFormat(time) {
  const timeRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
  return timeRegex.test(time);
}


case 7:
      if (!isValidTimeFormat(ctx.message.text)) {
        return ctx.replyWithHTML("‚ö†Ô∏è <strong>Noto'g'ri vaqt formati.</strong> \n\nIltimos to'g'ri vaqt formatini kiriting! (Masalan: 18:30)");
      }
      return saveAndReply(existingUser, ctx, 8, `<strong>8. Marhumning rasmini kiriting</strong>`);




=-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=

bot.on("photo", async (ctx) => {
  const user_id = ctx.from.id;
  const current_user = await personModel.findOne({ id: user_id });

  try {
    // rasm faylini identifikator (file_id) orqali oling
    const fileId = ctx.message.photo[0].file_id;
    const photoUrl = await bot.telegram.getFileLink(fileId);

    // Ma'lumotlarni o'zgartiramiz
    current_user.picture = photoUrl.href;
    await current_user.save();

    // Malumotlarni rasmli postga joylash
    const postText = `
      <em>‚Ä¢ Marhum haqida ma'lumot</em>\n
      2. Ismi: <strong>${current_user.firstname}</strong>
      3. Familiyasi: <strong>${current_user.lastname}</strong>
      4. Tug'ilgan sanasi: <strong>${current_user.age}</strong>
      5. Manzili: <strong>${current_user.address}</strong>
      6. Nomeri: <strong>${current_user.birth}</strong>
      7. Qayerdan topgani: <strong>${current_user.fixedAddress}</strong>
      8. Kompyuteri bormi: <strong>${current_user.approximateDestination}</strong>
      9. Internetga ulanganmi: <strong>${current_user.funeralTime}</strong>
    `;

    ctx.telegram.sendPhoto(
      "@codingfoundation", // Replace with your channel username
      { source: current_user.picture },
      {
        caption: postText,
        parse_mode: "HTML",
      }
    );

    ctx.reply(`A–ª–ª–æ“≥ –º–∞—Ä“≥—É–º–ª–∞—Ä–∏–º–∏–∑–Ω–∏ —û–∑ —Ä–∞“≥–º–∞—Ç–∏–≥–∞ –æ–ª—Å–∏–Ω, A–º–∏–Ω ü§≤`);

    await resetUserData(user_id);
  } catch (error) {
    console.log("‚ùóÔ∏è photo", error);
  }
});


=-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=-=-=-=-=-==-=

const personModel = require("../models/personModel");

const saveAndReply = async (existingUser, ctx, nextStep, replyText) => {
  existingUser.step = nextStep;
  await existingUser.save();
  return ctx.replyWithHTML(replyText);
};

const getInfo = async (existingUser, ctx) => {
  if (!existingUser) {
    existingUser = new personModel({ id: ctx.from.id });
    await existingUser.save();
  }

  switch (existingUser.step) {
    case 0:
      // No need to check text in this case
      return saveAndReply(
        existingUser,
        ctx,
        1,
        "<strong>1. –ñ–∞–Ω–∞–∑–∞ –≤–∞“õ—Ç–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥! \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> 21.04.2023 –ñ—É–º–∞</strong>"
      );

    case 1:
      return saveAndReply(
        existingUser,
        ctx,
        2,
        "<strong>2. –ú–∞–Ω–∑–∏–ª–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥! \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> –û–ª–º–∞–∑–æ—Ä –ú–§–ô, –Ø—à–Ω–æ–±–æ–¥ –∫—û—á–∞ 1-—É–π</strong>"
      );

    case 2:
      return saveAndReply(
        existingUser,
        ctx,
        3,
        `<strong>3. . –ú–∞–π–∏—Ç–Ω–∏–Ω–≥ –∏—Å–º–∏ —Ñ–∞–º–∏–ª–∏—è—Å–∏ –≤–∞ –∫–∞—Å–±–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥! \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> –ï—Ä–∫–∞–∫ –∫–∏—à–∏ –±—û–ª—Å–∞: “ö–∞—é–º–æ–≤ –ê—Ö–∞–¥–∂–æ–Ω (1970-–π–∏–ª, —Ç–∞–¥–±–∏—Ä–∫–æ—Ä) –∞–∫–∞–Ω–∏ –∂–∞–Ω–æ–∑–∞–ª–∞—Ä–∏ –±–æ—Ä
\n\nA—ë–ª –∫–∏—à–∏ –±—û–ª—Å–∞: “ö–∞—é–º–æ–≤ –ê—Ö–∞–¥–∂–æ–Ω –∞–∫–∞–Ω–∏ –∞—ë–ª–ª–∞—Ä–∏ “ö–∞—é–º–æ–≤–∞ –ú–∞–ª–æ—Ö–∞—Ç–∂–æ–Ω (1970-–π–∏–ª, —Ç–∞–¥–±–∏—Ä–∫–æ—Ä)¬†–∞—è–Ω–∏ –∂–∞–Ω–æ–∑–∞–ª–∞—Ä–∏ –±–æ—Ä</strong>`
      );

    case 3:
      return saveAndReply(
        existingUser,
        ctx,
        4,
        `<strong>4. –§–∞—Ä–∑–∞–Ω–¥–ª–∞—Ä–∏–Ω–∏–Ω–≥ –∏—Å–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥!</strong> \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> –§–∞—Ä–∑–∞–Ω–¥–ª–∞—Ä–∏: “ö–∞—é–º–æ–≤ –ê–≤–∞–∑–±–µ–∫, A–∑–∏–∑–æ–≤–∞ –°–∞–ª–∏–º–∞`
      );

    case 4:
      return saveAndReply(
        existingUser,
        ctx,
        5,
        `<strong>5. –ñ–∞–Ω–æ–∑–∞¬†—û“õ–∏–ª–∏—à –≤–∞“õ—Ç–∏ –≤–∞ –∂–æ–π–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥!</strong> \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> –ñ–∞–Ω–æ–∑–∞ ¬´–ö–∞—Ç—Ç–∞–±–æ“ì¬ª (–°–∞–¥–∞—á–∞ –º–∞—Å–∂–∏–¥–∏) –∂–æ–º–µ –º–∞—Å–∂–∏–¥–∏–¥–∞ –ñ—É–º–∞ (13:00) –Ω–∞–º–æ–∑–∏–¥–∞–Ω –∫–µ–π–∏–Ω —û“õ–∏–ª–∞–¥–∏
`
      );

    case 5:
      return saveAndReply(
        existingUser,
        ctx,
        6,
        `<strong>6. “ö–∞–π—Å–∏ “õ–∞–±—Ä–∏—Å—Ç–æ–Ω–≥–∞ “õ—û–π–∏–ª–∏—à–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥!</strong> \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> –î–∞—Ñ–Ω: –°–∞–¥–∞—á–∞ “õ–∞–±—Ä–∏—Å—Ç–æ–Ω–∏–¥–∞`
      );

    case 6:
      return saveAndReply(
        existingUser,
        ctx,
        7,
        `<strong>7. –û—Å–æ–Ω —Ç–æ–ø–∏—à–ª–∏–∫ —É—á—É–Ω –º—û–ª–∂–∞–ª–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥!</strong> \n\n<b>–ú–∏—Å–æ–ª —É—á—É–Ω:</b> –ë–∞—Ä—ë–Ω –∑–∞–≤–æ–¥ —Ä—û–ø–∞—Ä–∞—Å–∏–¥–∞`,

        ctx.telegram.sendMessage(
          process.env.SENDER_ID_ADDRESS,
          `
1. Janaza vaqti: <strong>@${existingUser.janazaVaqti}</strong>
2. Manzil: <strong>${existingUser.manzil}</strong>
3. Marhum haqida: <strong>${existingUser.mayitningMalumoti}</strong>
4. Farzandlarining ismi: <strong>${existingUser.farzandlariningIsmi}</strong>
5. Janaza vaqti: <strong>${existingUser.janazaVaqti}</strong>
6. Qabriston nomi: <strong>${existingUser.qabristonNomi}</strong>
7. Mo'ljal: <strong>${existingUser.moljal}</strong>
                `,
          { parse_mode: "HTML" }
        )
      );

    // default:
    //   return ctx.reply("‚ùóÔ∏è Xatolik default");
  }
};

module.exports = { getInfo };



===============================================================================================

if (isNaN(ctx.message.text)) {
        return ctx.replyWithHTML(
          "‚ö†Ô∏è <strong>Noto'g'ri format.</strong> \n\nIltimos yoshingizni son bilan kiriting!"
        );
      }











      // reply_markup: {
          //   inline_keyboard: [
          //     [
          //       { text: "–¢—û“ì—Ä–∏", callback_data: "correct" },
          //       { text: "–ù–æ—Ç—û“ì—Ä–∏", callback_data: "wrong" },
          //     ],
          //   ],
          // },



      console.log(ctx);
      if (ctx.callbackQuery.response === "correct") {
        await ctx.reply("‚úÖ –ú–∞–ª—É–º–æ—Ç–ª–∞—Ä —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏");
      } else if (ctx.callbackQuery.response === "wrong") {
        existingUser.step = 0;
        await existingUser.save();
        ctx.reply("‚ö†Ô∏è –ú–∞–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ “õ–∞–π—Ç–∞–¥–∞–Ω –∫–∏—Ä–∏—Ç–∏–Ω–≥");
      } else {
        await ctx.reply("‚ùóÔ∏è –ú–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫");
      }



      // return ctx.replyWithHTML("A–ª–ª–æ“≥ —Å–∏–∑–≥–∞ —Å–∞–±—Ä-—É –∂–∞–º–∏–ª –∞—Ç–æ “õ–∏–ª—Å–∏–Ω!");
